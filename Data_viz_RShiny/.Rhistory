library(shiny); runApp('pokemon.R')
runApp('pokemon.R')
cards <- readRDS("C:/Users/tdefoulounoux/Desktop/Rshiny/cards.rds")
cards_new <- readRDS("C:/Users/tdefoulounoux/Desktop/Rshiny/cards_new.rds")
decklist <- readRDS("C:/Users/tdefoulounoux/Desktop/Rshiny/decklist.rds")
duels_outcomes <- readRDS("C:/Users/tdefoulounoux/Desktop/Rshiny/duels_oucomes.rds")
matchs <- readRDS("C:/Users/tdefoulounoux/Desktop/Rshiny/matchs.rds")
players_with_results <- readRDS("C:/Users/tdefoulounoux/Desktop/Rshiny/players_with_results.rds")
tournaments <- readRDS("C:/Users/tdefoulounoux/Desktop/Rshiny/tournaments.rds")
View(players_with_results)
duels_outcomes <- duels_outcomes %>%
# Ajout des top2 pour player1
left_join(players_with_results %>%
select(tournament_id, player_id, top2_pokemon) %>%
rename(player1_id = player_id, top2_pokemon_1 = top2_pokemon),
by = c("tournament_id", "player1_id")) %>%
# Ajout des top2 pour player2
left_join(players_with_results %>%
select(tournament_id, player_id, top2_pokemon) %>%
rename(player2_id = player_id, top2_pokemon_2 = top2_pokemon),
by = c("tournament_id", "player2_id"))
library(plotly)
library(shiny)
library(DT)
library(glue)
library(dplyr)
library(stringr)
library(tidyr)
library(purrr)
library(DBI)
library(RMySQL)
duels_outcomes <- duels_outcomes %>%
# Ajout des top2 pour player1
left_join(players_with_results %>%
select(tournament_id, player_id, top2_pokemon) %>%
rename(player1_id = player_id, top2_pokemon_1 = top2_pokemon),
by = c("tournament_id", "player1_id")) %>%
# Ajout des top2 pour player2
left_join(players_with_results %>%
select(tournament_id, player_id, top2_pokemon) %>%
rename(player2_id = player_id, top2_pokemon_2 = top2_pokemon),
by = c("tournament_id", "player2_id"))
View(duels_outcomes)
duels_analysis <- duels_outcomes %>%
mutate(
duo1 = top2_pokemon_1,
duo2 = top2_pokemon_2,
winner = case_when(
player1_score > player2_score ~ "duo1",
player1_score < player2_score ~ "duo2",
TRUE ~ "draw"
)
) %>%
# On ne garde que les duels avec un vainqueur clair
filter(winner != "draw")
# √âtape 2 : Standardiser les r√©sultats du point de vue de duo1
matchups <- duels_analysis %>%
group_by(duo1, duo2) %>%
summarise(
total_matches = n(),
wins = sum(winner == "duo1"),
win_rate = round(wins / total_matches, 3),
.groups = "drop"
)
# √âtape 3 : Pour chaque duo1, trouver les 3 meilleurs et 3 pires matchups
best_matchups <- matchups %>%
group_by(duo1) %>%
arrange(desc(win_rate)) %>%
slice_head(n = 3) %>%
mutate(type = "best")
worst_matchups <- matchups %>%
group_by(duo1) %>%
arrange(win_rate) %>%
slice_head(n = 3) %>%
mutate(type = "worst")
# √âtape 4 : Combine les deux r√©sultats
top_matchups_summary <- bind_rows(best_matchups, worst_matchups)
View(top_matchups_summary)
View(matchs)
View(worst_matchups)
View(worst_matchups)
duels_analysis <- duels_outcomes %>%
mutate(
duo1 = top2_pokemon_1,
duo2 = top2_pokemon_2,
winner = case_when(
player1_score > player2_score ~ "duo1",
player1_score < player2_score ~ "duo2",
TRUE ~ "draw"
)
) %>%
filter(winner != "draw")  # Exclure les √©galit√©s
# √âtape 2 : Calcul des stats par matchup
matchups <- duels_analysis %>%
group_by(duo1, duo2) %>%
summarise(
total_matches = n(),
wins = sum(winner == "duo1"),
win_rate = round(wins / total_matches, 3),
.groups = "drop"
) %>%
filter(total_matches >= 10)  # üëâ Seuil minimum de 10 duels
# √âtape 3 : Extraire les 3 meilleurs et 3 pires matchups pour chaque duo
best_matchups <- matchups %>%
group_by(duo1) %>%
arrange(desc(win_rate)) %>%
slice_head(n = 3) %>%
mutate(type = "best")
worst_matchups <- matchups %>%
group_by(duo1) %>%
arrange(win_rate) %>%
slice_head(n = 3) %>%
mutate(type = "worst")
# √âtape 4 : Combine les r√©sultats
top_matchups_summary <- bind_rows(best_matchups, worst_matchups)
View(duels_outcomes)
View(matchups)
View(matchups)
View(decklist)
library(lubridate)
# Tableau des extensions (tu peux l‚Äôajuster si besoin)
extensions <- tribble(
~extension_code, ~extension_name, ~release_date,
"A1",   "Puissance G√©n√©tique",          ymd("2024-10-30"),
"A1a",  "L'√éle Fabuleuse",              ymd("2024-12-17"),
"A2",   "Choc Spatio-Temporel",         ymd("2025-01-30"),
"A2a",  "Lumi√®re Triomphale",           ymd("2025-02-28"),
"A2b",  "R√©jouissances Rayonnantes",    ymd("2025-03-27"),
"A3",   "Gardiens Astraux",             ymd("2025-04-30"),
"A3a",  "Crise Interdimensionnelle",    ymd("2025-05-29")
)
players_with_results <- players_with_results %>%
mutate(tournament_date = as.Date(tournament_date)) %>%  # S'assurer que c'est bien un Date
rowwise() %>%
mutate(extension = extensions %>%
filter(release_date <= tournament_date) %>%
arrange(desc(release_date)) %>%
slice(1) %>%
pull(extension_name)
) %>%
ungroup()
players_with_results <- players_with_results %>%
mutate(tournament_date = as.Date(tournament_date)) %>%
rowwise() %>%
mutate(extension = {
ext_row <- extensions %>%
filter(release_date <= tournament_date) %>%
arrange(desc(release_date)) %>%
slice_head(n = 1)
if (nrow(ext_row) == 0) NA_character_ else ext_row$extension_name
}) %>%
ungroup()
View(players_with_results)
View(extensions)
players_with_results <- players_with_results %>%
mutate(tournament_date = as.Date(tournament_date))
# Cr√©ation d'un vecteur vide pour stocker les extensions
extensions_vec <- character(nrow(players_with_results))
for (i in seq_len(nrow(players_with_results))) {
if (i %% 100 == 0 || i == 1) {  # Affiche toutes les 100 lignes + la 1√®re
cat("Traitement ligne", i, "sur", nrow(players_with_results), "\n")
}
t_date <- players_with_results$tournament_date[i]
ext_row <- extensions %>%
filter(release_date <= t_date) %>%
arrange(desc(release_date)) %>%
slice_head(n = 1)
if (nrow(ext_row) == 0) {
extensions_vec[i] <- NA_character_
} else {
extensions_vec[i] <- ext_row$extension_name
}
}
# Ajout de la colonne extension dans le dataframe
players_with_results$extension <- extensions_vec
# Calcul winrate par duo et par extension
winrate_by_duo <- players_with_results %>%
group_by(extension, top2_pokemon) %>%
summarise(
wins = sum(win, na.rm = TRUE),
losses = sum(losses, na.rm = TRUE),
total_matches = wins + losses,
win_rate = round(wins / total_matches, 3),
.groups = "drop"
) %>%
filter(total_matches > 0)  # Optionnel : ne garder que les duos qui ont jou√©
# Calcul winrate par duo et par extension
winrate_by_duo <- players_with_results %>%
group_by(extension, top2_pokemon) %>%
summarise(
wins = sum(wins, na.rm = TRUE),
losses = sum(losses, na.rm = TRUE),
total_matches = wins + losses,
win_rate = round(wins / total_matches, 3),
.groups = "drop"
) %>%
filter(total_matches > 0)  # Optionnel : ne garder que les duos qui ont jou√©
View(winrate_by_duo)
View(cards)
View(cards_new)
# 2. Extraire le nombre d'exemplaires et le nom de la carte
deck_cards <- deck_cards %>%
mutate(
number = as.numeric(str_extract(cards_list, "^\\d+")),
card_name = str_trim(str_remove(cards_list, "^\\d+x\\s*"))
) %>%
filter(!is.na(number))  # garder uniquement les cartes bien pars√©es
deck_cards <- players_with_results %>%
select(decklist, wins, losses) %>%
mutate(total_matches = wins + losses) %>%
filter(!is.na(decklist)) %>%
# S√©parer chaque carte dans une liste
mutate(cards_list = str_split(decklist, "\\|")) %>%
select(-decklist) %>%
unnest(cards_list) %>%
mutate(cards_list = str_trim(cards_list))  # enlever espaces
# 2. Extraire le nombre d'exemplaires et le nom de la carte
deck_cards <- deck_cards %>%
mutate(
number = as.numeric(str_extract(cards_list, "^\\d+")),
card_name = str_trim(str_remove(cards_list, "^\\d+x\\s*"))
) %>%
filter(!is.na(number))  # garder uniquement les cartes bien pars√©es
# 3. Calculer la contribution "jou√©e * matchs"
deck_cards <- deck_cards %>%
mutate(
played_weighted = number * total_matches
)
deck_cards <- deck_cards %>%
mutate(
wins_weighted = number * wins
)
# 5. Agr√©ger par carte
cards_summary <- deck_cards %>%
group_by(card_name) %>%
summarise(
times_played_weighted = sum(played_weighted, na.rm = TRUE),
wins_weighted = sum(wins_weighted, na.rm = TRUE),
winrate_weighted = wins_weighted / times_played_weighted,
.groups = "drop"
)
# 6. (Optionnel) Joindre avec la table cards pour filtrer uniquement les cartes pr√©sentes dans cards$card_name
cards_summary <- cards_summary %>%
filter(card_name %in% cards$card_name)
View(cards_summary)
# 5. Agr√©ger par carte
cards_summary <- deck_cards %>%
group_by(card_name) %>%
summarise(
times_played_weighted = sum(played_weighted, na.rm = TRUE),
wins_weighted = sum(wins_weighted, na.rm = TRUE),
winrate_weighted = wins_weighted / times_played_weighted,
.groups = "drop"
)
View(cards_summary)
cards <- cards %>%
left_join(cards_summary, by = c("card_name" = "card_name"))
clean_card_name <- function(name) {
# Exemple : "Weezing (A1a-50) (Pok√©mon)" -> "Weezing (A1a-50)"
# Enlever le dernier groupe entre parenth√®ses s'il est "Pok√©mon", "Trainer", etc.
str_trim(str_remove(name, "\\s*\\((Pok√©mon|Trainer|Supporter|Item|Stadium|Energy)\\)$"))
}
# Nettoyer les noms dans cards
cards_summary <- cards_summary %>%
mutate(card_name_clean = clean_card_name(card_name))
# Nettoyer les noms extraits des decklists
cards <- cards %>%
mutate(card_name_clean = clean_card_name(card_name))
cards <- cards %>%
left_join(cards_summary, by = c("card_name_clean" = "card_name_clean"))
cards <- cards %>%
rename(
card_name.x = card_name,
times_played_weighted.x = times_played_weighted
times_played_weighted.x = times_played_weighted
cards <- cards[, !(names(cards) %in% c("card_name_clean", "card_name.y", "times_played_weighted.y", "wins_weighted.y", "winrate_weighted.y"))]
cards <- cards %>%
rename(
card_name.x = card_name,
times_played_weighted.x = times_played_weighted,
wins_weighted.x = wins_weighted,
winrate_weighted.x = winrate_weighted,
times_played_weighted.x = times_played_weighted,
times_played_weighted.x = times_played_weighted,
)
cards <- cards %>%
rename(
card_name = card_name.x,
times_played_weighted = times_played_weighted.x,
wins_weighted = wins_weighted.x,
winrate_weighted = winrate_weighted.x,
times_played_weighted = times_played_weighted.x,
times_played_weighted = times_played_weighted.x,
)
cards <- cards %>%
rename(
Name = card_name,
times_played_weighted = times_played_weighted.x,
Wins = wins_weighted,
Winsrate = winrate_weighted,
Played = times_played_weighted
)
cards <- cards %>%
rename(
Name = card_name,
Wins = wins_weighted,
Winsrate = winrate_weighted,
Played = times_played_weighted
)
cartes <- cards %>%
select(Name, Wins, Winsrate, Played)
View(deck_cards)
View(decklist)
View(winrate_by_duo)
decks <- winrate_by_duo
runApp('pokemon.R')
runApp('pokemon.R')
View(cartes)
View(cards)
# 5. Agr√©ger par carte
cards_summary <- deck_cards %>%
group_by(card_name) %>%
summarise(
times_played_weighted = sum(played_weighted, na.rm = TRUE),
wins_weighted = sum(wins_weighted, na.rm = TRUE),
winrate_weighted = wins_weighted / times_played_weighted,
.groups = "drop"
)
View(cards_summary)
clean_card_name <- function(name) {
# Exemple : "Weezing (A1a-50) (Pok√©mon)" -> "Weezing (A1a-50)"
# Enlever le dernier groupe entre parenth√®ses s'il est "Pok√©mon", "Trainer", etc.
str_trim(str_remove(name, "\\s*\\((Pok√©mon|Trainer|Supporter|Item|Stadium|Energy)\\)$"))
}
# Nettoyer les noms dans cards
cards_summary <- cards_summary %>%
mutate(card_name_clean = clean_card_name(card_name))
# Nettoyer les noms extraits des decklists
cards <- cards %>%
mutate(card_name_clean = clean_card_name(card_name))
# Nettoyer les noms extraits des decklists
cards <- cards %>%
mutate(card_name_clean = clean_card_name(Name))
cards <- cards %>%
left_join(cards_summary, by = c("card_name_clean" = "card_name_clean"))
cards <- cards[, !(names(cards) %in% c( "Wins", "Winsrate", "Played"))]
cards <- cards %>%
rename(
Name = card_name,
Wins = wins_weighted,
Winsrate = winrate_weighted,
Played = times_played_weighted
)
cards <- cards %>%
rename(
Wins = wins_weighted,
Winsrate = winrate_weighted,
Played = times_played_weighted
)
cartes <- cards %>%
select(Name, Wins, Winsrate, Played)
runApp('pokemon.R')
View(decks)
runApp('pokemon.R')
View(winrate_by_duo)
winrate_by_duo <- winrate_by_duo %>%
mutate(extension = ifelse(is.na(extension), "Puissance G√©n√©tique", extension))
runApp('pokemon.R')
runApp('pokemon.R')
View(cards)
runApp('pokemon.R')
cartes <- cards %>%
select(Name, Wins, Winsrate, Played, card_type)
runApp('pokemon.R')
Match_up <- top_matchups_summary
saveRDS(top_matchups_summary, "C:/Users/tdefoulounoux/Desktop/Rshiny/top_matchups_summary.rds")
saveRDS(cards, "C:/Users/tdefoulounoux/Desktop/Rshiny/cards.rds")
saveRDS(winrate_by_duo, "C:/Users/tdefoulounoux/Desktop/Rshiny/winrate_by_duo.rds")
runApp('pokemon.R')
saveRDS(top_matchups_summary, "C:/Users/tdefoulounoux/Desktop/Rshiny/top_matchups_summary.rds")
saveRDS(cards, "C:/Users/tdefoulounoux/Desktop/Rshiny/cards.rds")
saveRDS(winrate_by_duo, "C:/Users/tdefoulounoux/Desktop/Rshiny/winrate_by_duo.rds")
cards <- readRDS("C:/Users/tdefoulounoux/Desktop/Rshiny/cards.rds")
top_matchups_summary <- readRDS("C:/Users/tdefoulounoux/Desktop/Rshiny/top_matchups_summary.rds")
winrate_by_duo <- readRDS("C:/Users/tdefoulounoux/Desktop/Rshiny/winrate_by_duo.rds")
View(Match_up)
Match_up <- top_matchups_summary
Match_up <- Match_up %>%
rename(
Deck_1 = duo1,
Deck_2 = duo2
)
runApp('pokemon.R')
runApp('pokemon.R')
runApp('pokemon.R')
runApp('pokemon.R')
library(shiny); runApp('pokemon.R')
